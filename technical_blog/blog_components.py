"""Reusable components for the technical blog"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_blog_components.ipynb.

# %% auto 0
__all__ = ['create_nav_links', 'create_brand', 'create_theme_toggle', 'create_nav', 'topic_card', 'math_block', 'code_block']

# %% ../nbs/01_blog_components.ipynb 3
from fasthtml.common import *
from monsterui.all import *
from typing import List, Dict, Any

__all__ = ['create_nav', 'topic_card', 'math_block', 'code_block']

# %% ../nbs/01_blog_components.ipynb 5
def create_nav_links(nav_items, current_topic=None):
    """Create navigation links with active state handling"""
    
    def is_active_link(title, topic):
        if not topic: return False
        return (title.lower().startswith(topic.lower()) or 
                (topic.lower() == "home" and title == "Home") or
                (topic.lower() == "rbe" and title == "RBE Series"))
    
    def nav_link(title, url, active=False):
        """Create a navigation link using MonsterUI Button component"""
        variant = "default" if active else "ghost"
        return Button(
            title,
            href=url,
            variant=variant,
            size="sm",
            cls="transition-colors"
        )
    
    return [nav_link(title, url, is_active_link(title, current_topic)) 
            for title, url in nav_items]



# %% ../nbs/01_blog_components.ipynb 7
def create_brand(title="Matthew Redrup's Blog", subtitle="Ramblings on AI & Cybersecurity"):
    """Create the brand/header section"""
    return Div(
        H3(title, cls="font-bold"),
        P(subtitle, cls="text-muted-foreground hidden sm:block text-sm"),
        cls="flex flex-col"
    )

# %% ../nbs/01_blog_components.ipynb 9
def create_theme_toggle():
    """Create theme toggle that works with MonsterUI's system"""
    return Div(
        Button("☀️", 
               onclick="""
               const franken = JSON.parse(localStorage.getItem('__FRANKEN__') || '{}');
               franken.mode = 'light';
               localStorage.setItem('__FRANKEN__', JSON.stringify(franken));
               document.documentElement.classList.remove('dark');
               """, 
               variant="ghost", size="sm", cls="transition-colors"),
        Button("🌙", 
               onclick="""
               const franken = JSON.parse(localStorage.getItem('__FRANKEN__') || '{}');
               franken.mode = 'dark';
               localStorage.setItem('__FRANKEN__', JSON.stringify(franken));
               document.documentElement.classList.add('dark');
               """, 
               variant="ghost", size="sm", cls="transition-colors"),
        cls="flex gap-1"
    )


# %% ../nbs/01_blog_components.ipynb 12
def create_nav(topic: str = None) -> NavBar:
    "Create main navigation with MonsterUI `NavBar` for current `topic`"
    nav_items = [
        ('Home', '/'),
        ('RBE Series', '/rbe/'),
        ('Future Topics', '/topics/'),
        ('About', '/about/')
    ]
    
    # Get all components
    nav_links = create_nav_links(nav_items, topic)
    brand = create_brand()
    theme_toggle = create_theme_toggle()
    
    return NavBar(
        *nav_links,
        theme_toggle,
        brand=brand,
        cls="border-b"
    )

# %% ../nbs/01_blog_components.ipynb 15
def topic_card(title: str, desc: str, url: str, status: str = "available") -> Div:
    "Create a card for blog `title` with `desc`ription and `url`"
    status_cls = f"topic-{status}"
    
    return Div(
        H3(title),
        P(desc),
        A("Read More →", href=url, cls="topic-link") if status == "available" else Span("Coming Soon", cls="coming-soon"),
        cls=f"topic-card {status_cls}"
    )

# %% ../nbs/01_blog_components.ipynb 17
def math_block(tex: str, block: bool = True) -> Div:
    "Render LaTeX `tex` using KatexMarkdownJS"
    delim = "$$" if block else "$"
    content = f"{delim}{tex}{delim}"
    
    return Div(
        content,
        cls="marked math-content" if block else "marked math-inline"
    )

# %% ../nbs/01_blog_components.ipynb 20
def code_block(code: str, language: str = "python", title: str = None) -> Div:
    """Create a syntax-highlighted code block using FastHTML's HighlightJS"""
    code_element = Pre(
        Code(code, cls=f"language-{language}")
    )
    
    if title:
        return Div(
            Div(title, cls="code-title"),
            code_element,
            cls="code-block-container"
        )
    else:
        return Div(code_element, cls="code-block-container")
