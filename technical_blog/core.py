"""Core utilities and helpers for the technical blog following fast.ai conventions"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['get_nb_url', 'slugify', 'read_meta']

# %% ../nbs/00_core.ipynb 2
from fastcore.basics import *
from pathlib import Path
import re

__all__ = ['get_nb_url', 'slugify', 'read_meta']

# %% ../nbs/00_core.ipynb 4
def get_nb_url(nb_path: Path) -> str:
    "Convert notebook `nb_path` to documentation URL"
    # Remove .ipynb extension and nbs/ prefix
    rel_path = str(nb_path).replace('nbs/', '').replace('.ipynb', '')
    return f"/{rel_path}/" if rel_path != 'index' else "/"

# %% ../nbs/00_core.ipynb 6
def slugify(text: str) -> str:
    "Convert `text` to URL-friendly slug"
    # Convert to lowercase and replace spaces with hyphens
    slug = text.lower().strip()
    slug = re.sub(r'[^\w\s-]', '', slug)
    slug = re.sub(r'[-\s]+', '-', slug)
    return slug

# %% ../nbs/00_core.ipynb 8
def read_meta(nb_path: Path) -> dict:
    "Read metadata from notebook at `nb_path`"
    import json
    meta = {'title': 'Untitled', 'description': '', 'keywords': []}
    
    if nb_path.exists():
        with open(nb_path) as f:
            nb = json.load(f)
            # Extract from first markdown cell if available
            if nb.get('cells') and nb['cells'][0]['cell_type'] == 'markdown':
                lines = nb['cells'][0]['source']
                if lines:
                    # First line is title
                    meta['title'] = lines[0].strip('# \n')
                    # Look for description after >
                    for line in lines:
                        if line.startswith('>'):
                            meta['description'] = line.strip('> \n')
                            break
    return meta
