"""Core utilities and helpers for the technical blog following fast.ai conventions"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['get_nb_url', 'slugify', 'read_meta']

# %% ../nbs/00_core.ipynb 2
from fastcore.basics import *
from pathlib import Path
import re

__all__ = ['get_nb_url', 'slugify', 'read_meta']

# %% ../nbs/00_core.ipynb 4
def get_nb_url(nb_path: Path) -> str:
    "Convert notebook `nb_path` to documentation URL"
    # Remove .ipynb extension and nbs/ prefix
    rel_path = str(nb_path).replace('nbs/', '').replace('.ipynb', '')
    return f"/{rel_path}/" if rel_path != 'index' else "/"

# %% ../nbs/00_core.ipynb 6
def slugify(text: str) -> str:
    "Convert `text` to URL-friendly slug"
    # Convert to lowercase and replace spaces with hyphens
    slug = text.lower().strip()
    slug = re.sub(r'[^\w\s-]', '', slug)
    slug = re.sub(r'[-\s]+', '-', slug)
    return slug

# %% ../nbs/00_core.ipynb 7
def read_meta(nb_path: Path) -> dict:
    "Extract metadata from notebook `nb_path`"
    import json
    
    # Read the notebook file
    with open(nb_path, 'r', encoding='utf-8') as f:
        nb_data = json.load(f)
    
    # Extract title and description from first markdown cell
    cells = nb_data.get('cells', [])
    
    title = "Untitled"
    description = ""
    
    for cell in cells:
        if cell.get('cell_type') == 'markdown':
            source = ''.join(cell.get('source', []))
            lines = source.split('\n')
            
            # Look for title (# header)
            for line in lines:
                if line.startswith('# '):
                    title = line[2:].strip()
                    break
            
            # Look for description (> blockquote)
            for line in lines:
                if line.startswith('> '):
                    description = line[2:].strip()
                    break
            
            break
    
    return {
        'title': title,
        'description': description
    }
